# Copyright 2025 FireGen Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: firegen
version: 0.2.4
specVersion: v1beta

displayName: FireGen â€“ turns RTDB into your universal Generative AI API
description: >
  Listens for job requests in Realtime Database and generates videos, images, audio, or text using
  Vertex AI models (Veo, Imagen, Gemini, Chirp, Lyria). Supports AI-assisted mode (natural language)
  and explicit mode (structured parameters). Results written back to Realtime Database with signed URLs.

license: Apache-2.0
sourceUrl: https://github.com/shipfail/firegen   # public, verifiable source

author:
  authorName: Huan Li
  url: https://github.com/huan

tags:
  - ai
  - generation
  - media
  - utilities

billingRequired: true

# What users must enable in their project.
apis:
  - apiName: aiplatform.googleapis.com
    reason: Access Vertex AI models for video, image, audio, and text generation.
  - apiName: cloudfunctions.googleapis.com
    reason: Run the FireGen worker functions.
  - apiName: eventarc.googleapis.com
    reason: Wire Cloud Functions v2 triggers (RTDB onCreate, Task Queue).
  - apiName: cloudtasks.googleapis.com
    reason: Poll async operations for video generation (Veo long-running operations).

roles:
  - role: firebasedatabase.admin
    reason:
      Allows the extension to read job requests and write results to your Realtime Database instance.
  - role: aiplatform.user
    reason: >
      Required for Vertex AI model inference via REST API (aiplatform.endpoints.predict permission).
      Used for video generation (Veo), image generation (Gemini Image), audio generation (Gemini TTS),
      and AI-assisted mode analysis (Gemini 2.5 Flash Lite). Without this role, all model calls will
      fail with 403 Forbidden errors.
  - role: storage.objectAdmin
    reason:
      Allows the extension to manage generated media files in Cloud Storage.
  - role: cloudtasks.enqueuer
    reason:
      Allows the extension to enqueue tasks for polling async video generation operations.
  - role: iam.serviceAccountUser
    reason:
      Allows the extension service account to act as itself when creating Cloud Tasks and other resources.
  - role: iam.serviceAccountTokenCreator
    reason:
      Allows the extension to generate signed URLs for Cloud Storage files, enabling temporary authenticated access to generated media.

resources:
  - name: onJobCreated
    type: firebaseextensions.v1beta.v2function
    description: >
      Listens for new job requests in your specified Realtime Database path.
      Handles both AI-assisted mode (natural language strings) and explicit mode (structured objects).
      Routes jobs to appropriate model adapters and manages async operations for video generation.
    properties:
      buildConfig:
        runtime: nodejs22
      serviceConfig:
        availableMemory: 512M
        timeoutSeconds: 540
      eventTrigger:
        eventType: google.firebase.database.ref.v1.created
        eventFilters:
          - attribute: ref
            value: firegen-jobs/{jobId}
            operator: match-path-pattern
          - attribute: instance
            value: ${DATABASE_INSTANCE}

  - name: onJobPoll
    type: firebaseextensions.v1beta.function
    description: >
      Task Queue trigger for polling async video generation operations.
      Checks Vertex AI operation status, handles retries, and updates job status in Realtime Database.
    properties:
      runtime: nodejs22
      taskQueueTrigger: {}

# No configurable parameters - extension uses hard-coded values:
# - Database instance: ${DATABASE_INSTANCE} (default Firebase RTDB instance)
# - Job path: firegen-jobs/{jobId} (hard-coded in source code)
# - All other settings are auto-resolved by the source code
params: []
